set(PACKAGE_VERSION "@ARG_VERSION@")
set(PACKAGE_VERSION_MAJOR "@ARG_VERSION_MAJOR@")
set(PACKAGE_VERSION_MINOR "@ARG_VERSION_MINOR@")
set(PACKAGE_VERSION_PATCH "@ARG_VERSION_PATCH@")

if(@ARG_NAME@_DEBUG)
  message(STATUS "Debug mode on")
  message(STATUS "Installed @ARG_NAME@_VERSION: ${PACKAGE_VERSION}")

  message(STATUS "Installed @ARG_NAME@_BUILD_ARCHITECTURES: @standard_BUILD_ARCHITECTURES@")
    message(STATUS "Configured @ARG_NAME@_BUILD_ARCHITECTURES: ${@ARG_NAME@_BUILD_ARCHITECTURES}")

  message(STATUS "Installed CMAKE_SIZEOF_VOID_P: @CMAKE_SIZEOF_VOID_P@")
  message(STATUS "Configured CMAKE_SIZEOF_VOID_P: ${CMAKE_SIZEOF_VOID_P}")
endif()

# If the customer has an override architecture requirement, use that
if(DEFINED @ARG_NAME@_ARCHITECTURE)
  foreach(i IN LISTS @ARG_NAME@_ARCHITECTURE)
    string(REGEX MATCH "amd64|x86_64|x64" @ARG_NAME@_is_x64 ${i})
    string(REGEX MATCH "i386|x86" @ARG_NAME@_is_x86 ${i})
    string(REGEX MATCH "arm" @ARG_NAME@_is_arm ${i})

    # Classify
    if(@ARG_NAME@_is_x86)
      list(APPEND @ARG_NAME@_ARCHITECTURES x86)
    elseif(@ARG_NAME@_is_x64)
      list(APPEND @ARG_NAME@_ARCHITECTURES x64)
    elseif(@ARG_NAME@_is_arm)
      list(APPEND @ARG_NAME@_ARCHITECTURES arm)
    else()
      message(WARNING "Unrecognized architecture ${i}")
    endif()
  endforeach()
else()
  # Try to infer what the user wants
  if(CMAKE_SYSTEM_PROCESSOR STREQUAL "arm")
    set(@ARG_NAME@_ARCHITECTURES arm)
  elseif(CMAKE_SIZEOF_VOID_P EQUAL "8")
    set(@ARG_NAME@_ARCHITECTURES x64)
  else()
    set(@ARG_NAME@_ARCHITECTURES x86)
  endif()
endif()

if(@ARG_NAME@_DEBUG)
  message(STATUS "@ARG_NAME@_ARCHITECTURE: ${@ARG_NAME@_ARCHITECTURE}")
  message(STATUS "@ARG_NAME@_ARCHITECTURES: ${@ARG_NAME@_ARCHITECTURES}")
endif()

# Architectures we were built with
set(@ARG_NAME@_BUILD_ARCHITECTURES @standard_BUILD_ARCHITECTURES@)
if(@ARG_NAME@_DEBUG)
  message(STATUS "@ARG_NAME@_BUILD_ARCHITECTURES: ${@ARG_NAME@_BUILD_ARCHITECTURES}")
endif()

# Verify that we match all of the architectures requested by the customer
foreach(i IN LISTS @ARG_NAME@_ARCHITECTURES)
  list(FIND @ARG_NAME@_BUILD_ARCHITECTURES ${i} found)
  if(found EQUAL -1)
    set(PACKAGE_VERSION_COMPATIBLE FALSE)
    set(PACKAGE_VERSION_UNSUITABLE TRUE)
    if(@ARG_NAME@_DEBUG)
      message(STATUS "Requested architecture of ${@ARG_NAME@_ARCHITECTURE} not compatible with @standard_BUILD_ARCHITECTURES@")
    endif()
    return()
  endif()
endforeach()

# Determine whether the user's request (either implied or explicit) for libstdc++ can
# be met by this verison of @ARG_NAME@
if(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
  if(@ARG_NAME@_DEBUG)
    message(STATUS "Installed @ARG_NAME@_USE_LIBCXX: @standard_USE_LIBCXX@")
    message(STATUS "Configured @ARG_NAME@_USE_LIBCXX: ${@ARG_NAME@_USE_LIBCXX}")
  endif()
endif()

if(PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)
  if(@ARG_NAME@_DEBUG)
    message(STATUS "Our version is less than the requested one, trivially incompatible")
  endif()
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
elseif(NOT PACKAGE_FIND_VERSION_MINOR EQUAL PACKAGE_VERSION_MINOR)
  if(@ARG_NAME@_DEBUG)
    message(STATUS "Minor version mismatch, requested minor is ${PACKAGE_FIND_VERSION_MINOR}, this version is ${PACKAGE_VERSION_MINOR}")
  endif()
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
elseif(NOT PACKAGE_FIND_VERSION_MAJOR EQUAL PACKAGE_VERSION_MAJOR)
  if(@ARG_NAME@_DEBUG)
    message(STATUS "Major version mismatch, failure.")
  endif()
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
else()
  set(PACKAGE_VERSION_COMPATIBLE TRUE)
  if (PACKAGE_VERSION VERSION_EQUAL PACKAGE_FIND_VERSION)
    set(PACKAGE_VERSION_EXACT TRUE)
  endif()

  if(@ARG_NAME@_DEBUG)
    message(STATUS "Using @ARG_NAME@ in ${CMAKE_CURRENT_SOURCE_DIR}")
  endif()
endif()
